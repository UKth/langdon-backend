// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model College {
  id         Int      @id @default(autoincrement())
  mailFooter String   @unique
  name       String   @unique
  activated  Boolean  @default(false)
  User       User[]
  Course     Course[]
  Board      Board[]
  Table      Table[]

  @@index([mailFooter])
  @@index([name])
}

model User {
  id                Int        @id @default(autoincrement())
  netId             String
  email             String     @unique
  college           College    @relation(fields: [collegeId], references: [id])
  firstName         String
  middleName        String?
  lastName          String
  collegeId         Int
  userFriends       Friend[]   @relation(name: "users")
  friendUserFriends Friend[]   @relation(name: "friend_users")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  boards            Board[]
  posts             Post[]
  comments          Comment[]
  likedPost         Post[]     @relation("like_post")
  likedComment      Comment[]  @relation("like_comment")
  reports           Report[]
  tables            Table[]
  defaultTable      Table      @relation("default_table", fields: [defaultTableId], references: [id])
  defaultTableId    Int        @unique
  pushToken         String
  messages          Message[]
  chatrooms         Chatroom[]

  @@index([netId])
}

model Table {
  id              Int     @id @default(autoincrement())
  user            User?   @relation(fields: [userId], references: [id])
  userId          Int?
  college         College @relation(fields: [collegeId], references: [id])
  termCode        Int
  title           String
  enrolledClasses Class[]
  collegeId       Int
  defaultUser     User?   @relation("default_table")
}

model FriendRequest {
  id        Int @id @default(autoincrement())
  createrId Int
  code      Int

  @@unique([createrId])
  @@index([createrId])
}

model Friend {
  id        Int      @id @default(autoincrement())
  userId    Int
  friendId  Int
  user      User     @relation(name: "users", fields: [userId], references: [id], onDelete: Cascade)
  friend    User     @relation(name: "friend_users", fields: [friendId], references: [id], onDelete: Cascade)
  status    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, friendId])
  @@index([userId, friendId])
  @@index([userId])
  @@index([friendId])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  code      Int
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Course {
  id                              Int     @id @default(autoincrement())
  college                         College @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  courseId                        String // 000441
  termCode                        Int //1232
  subjectCode                     Int //112
  courseDesignation               String
  courseDesignationCompressed     String // whitespace removed
  fullCourseDesignation           String
  fullCourseDesignationCompressed String // whitespace removed
  enrollmentPrerequisites         String
  minimumCredits                  Int
  maximumCredits                  Int
  title                           String
  classes                         Class[]
  collegeId                       Int
  board                           Board?  @relation(fields: [boardId], references: [id])
  boardId                         Int?    @unique

  @@unique([courseId, termCode, subjectCode])
  @@index([collegeId, termCode, courseDesignationCompressed])
  @@index([collegeId, termCode, fullCourseDesignationCompressed])
}

model Class {
  id            Int       @id @default(autoincrement())
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      Int
  sections      Section[] // probably 1~2
  enrolledTable Table[]

  @@index([courseId])
}

// per class type
model Section {
  id            Int            @id @default(autoincrement())
  class         Class          @relation(fields: [classId], references: [id], onDelete: Cascade)
  type          String? // "LEC", "DIS"
  sectionNumber String? // 001, 301
  classId       Int
  instructor    Instructor?    @relation(fields: [instructorId], references: [id])
  instructorId  Int?
  classMeetings ClassMeeting[]

  @@index([classId])
}

model ClassMeeting {
  id                  Int       @id @default(autoincrement())
  section             Section   @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  meetingOrExamNumber String
  meetingType         String
  meetingTimeStart    Int?
  meetingTimeEnd      Int?
  meetingDays         String?
  building            Building? @relation(fields: [buildingId], references: [id])
  room                String?
  examDate            Int?
  buildingId          Int?
  sectionId           Int

  @@index([sectionId])
}

model Building {
  id            Int            @id @default(autoincrement())
  buildingCode  String         @unique
  buildingName  String?
  streetAddress String?
  latitude      Float?
  longitude     Float?
  classMeetings ClassMeeting[]
}

model Instructor {
  id         Int       @id @default(autoincrement())
  netid      String    @unique
  emplid     String
  pvi        String
  firstName  String?
  middleName String?
  lastName   String?
  email      String?
  sections   Section[]
}

model Board {
  id        Int       @id @default(autoincrement())
  title     String
  type      BoardType
  college   College   @relation(fields: [collegeId], references: [id], onDelete: Cascade)
  collegeId Int
  course    Course?
  courseId  Int?      @unique
  Posts     Post[]
  createdBy User?     @relation(fields: [userId], references: [id])
  userId    Int?
  createdAt DateTime  @default(now())
}

enum BoardType {
  class
  general
}

model Post {
  id          Int        @id @default(autoincrement())
  board       Board      @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId     Int
  title       String
  content     String
  createdBy   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  likedUsers  User[]     @relation("like_post")
  comments    Comment[]
  isAnonymous Boolean    @default(true)
  chatrooms   Chatroom[]

  @@index([boardId])
  @@index([userId])
}

model Comment {
  id          Int      @id @default(autoincrement())
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  content     String
  createdBy   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likedUsers  User[]   @relation("like_comment")
  postId      Int
  isAnonymous Boolean  @default(true)

  @@index([userId])
  @@index([postId])
}

model Chatroom {
  id            Int       @id @default(autoincrement())
  post          Post?     @relation(fields: [postId], references: [id])
  postId        Int?
  isAnonymous   Boolean   @default(true)
  members       User[]
  messages      Message[]
  lastMessage   Message   @relation("last_message", fields: [lastMessageId], references: [id])
  lastMessageId Int       @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Message {
  id           Int       @id @default(autoincrement())
  chatroom     Chatroom? @relation(fields: [chatroomId], references: [id])
  chatroomId   Int?
  lastChatroom Chatroom? @relation("last_message")
  user         User      @relation(fields: [userId], references: [id])
  userId       Int
  content      String
  createdAt    DateTime  @default(now())
}

model Report {
  id         Int              @id @default(autoincrement())
  user       User             @relation(fields: [userId], references: [id])
  content    String
  userId     Int
  targetId   Int
  targetType ReportTargetType
}

enum ReportTargetType {
  post
  user
  comment
}

model CollegeSupportRequest {
  id          Int    @id @default(autoincrement())
  name        String
  email       String
  emailFooter String
  pushToken   String

  @@index([emailFooter])
}
